[{"content":"Project Placeholder In the process of populating. Come back in a few days!\n","permalink":"http://example.org/projects/project/","title":"Project Placeholder"},{"content":"","permalink":"http://example.org/tags/arch/","title":"arch"},{"content":"A Personal Arch Installation Guide This is a personal guide so if you are lost and just found this guide from somewhere, I recommend you to read the official wiki! This guide will focus on systemd-boot, UEFI and a guide if you want to encrypt your partition with LUKS/LVM. This guide exists so that I can remember a bunch of things when reinstalling Archlinux.\nPre-installation Before installing, make sure to:\n Read the official wiki. It is advisable to read that instead. I wrote this guide for myself. Acquire an installation image from here. Verify signature. Prepare an installation medium. Boot the live environment.  Set the keyboard layout The default console keymap is US. Available layouts can be listed with:\n# ls /usr/share/kbd/keymaps/**/*.map.gz To modify the layout, append a corresponding file name to loadkeys, omitting path and file extension. For example, to set a US keyboard layout:\n# loadkeys us Verify the boot mode If UEFI mode is enabled on an UEFI motherboard, Archiso will boot Arch Linux accordingly via systemd-boot. To verify this, list the efivars directory:\n# ls /sys/firmware/efi/efivars If the command shows the directory without error, then the system is booted in UEFI mode. If the directory does not exist, the system may be booted in BIOS (or CSM) mode.\nConnect to the internet We need to make sure that we are connected to the internet to be able to install Arch Linux base and linux packages. Let’s see the names of our interfaces.\n# ip link You should see something like this:\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: enp0s0: \u0026lt;NO-CARRIER,BROADCAST,MULTICAST,UP\u0026gt; mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000 link/ether 00:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff 3: wlan0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP mode DORMANT group default qlen 1000 link/ether 00:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff permaddr 00:00:00:00:00:00  enp0s0 is the wired interface wlan0 is the wireless interface  Wired Connection If you are on a wired connection, you can enable your wired interface by systemctl start dhcpcd@\u0026lt;interface\u0026gt;.\n# systemctl start dhcpcd@enp0s0 Wireless Connection If you are on a laptop, you can connect to a wireless access point using iwctl command from iwd. Note that it\u0026rsquo;s already enabled by default. Also make sure the wireless card is not blocked with rfkill.\nScan for network.\n# iwctl station wlan0 scan Get the list of scanned networks by:\n# iwctl station wlan0 get-networks Connect to your network.\n# iwctl -P \u0026quot;PASSPHRASE\u0026quot; station wlan0 connect \u0026quot;NETWORKNAME\u0026quot; Ping archlinux website to make sure we are online:\n# ping archlinux.org If you receive Unknown host or Destination host unreachable response, means you are not online yet. Review your network configuration and redo the steps above.\nUpdate the system clock Use timedatectl to ensure the system clock is accurate:\n# timedatectl set-ntp true To check the service status, use timedatectl status.\nPartition the disks When recognized by the live system, disks are assigned to a block device such as /dev/sda, /dev/nvme0n1 or /dev/mmcblk0. To identify these devices, use lsblk or fdisk. The most common main drive is sda.\n# lsblk Results ending in rom, loop or airoot may be ignored.\nIn this guide, I\u0026rsquo;ll create a two different ways to partition a drive. One for a normal installation, the other one is setting up with an encryption(LUKS/LVM). Let\u0026rsquo;s start with the unecrypted one:\nUnencrypted filesystem   Let’s clean up our main drive to create new partitions for our installation. And yeah, in this guide, we will use /dev/sda as our disk.\n# gdisk /dev/sda    Press x to enter expert mode. Then press z to zap our drive. Then hit y when prompted about wiping out GPT and blanking out MBR. Note that this will zap your entire drive so your data will be gone - reduced to atoms after doing this. THIS. CANNOT. BE. UNDONE.\n  Open cgdisk to start partitioning our filesystem\n# cgdisk /dev/sda    Press Return when warned about damaged GPT.\nNow we should be presented with our main drive showing the partition number, partition size, partition type, and partition name. If you see list of partitions, delete all those first.\n  Create the boot partition\n Hit New from the options at the bottom. Just hit enter to select the default option for the first sector. Now the partion size - Arch wiki recommends 200-300 MB for the boot + size. Let’s make 1GiB in case we need to add more OS to our machine. I’m gonna assign mine with 1024MiB. Hit enter. Set GUID to EF00. Hit enter. Set name to boot. Hit enter. Now you should see the new partition in the partitions list with a partition type of EFI System and a partition name of boot. You will also notice there is 1007KB above the created partition. That is the MBR. Don’t worry about that and just leave it there.    Create the swap partition\n Hit New again from the options at the bottom of partition list. Just hit enter to select the default option for the first sector. For the swap partition size, I always assign mine with 1GiB. Hit enter. Set GUID to 8200. Hit enter. Set name to swap. Hit enter.    Create the root partition\n Hit New again. Hit enter to select the default option for the first sector. Hit enter again to input your root size. Also hit enter for the GUID to select default(8300). Then set name of the partition to root.    Create the root partition\n Hit New again. Hit enter to select the default option for the first sector. Hit enter again to use the remainder of the disk. Also hit enter for the GUID to select default. Then set name of the partition to home.    Lastly, hit Write at the bottom of the patitions list to write the changes to the disk. Type yes to confirm the write command. Now we are done partitioning the disk. Hit Quit to exit cgdisk. Go to the next section.\n  Encrypted filesystem with LUKS/LVM   Let’s clean up our main drive to create new partitions for our installation. And yeah, in this guide, we will use /dev/sda as our disk.\n# gdisk /dev/sda    Press x to enter expert mode. Then press z to zap our drive. Then hit y when prompted about wiping out GPT and blanking out MBR. Note that this will zap your entire drive so your data will be gone - reduced to atoms after doing this. THIS. CANNOT. BE. UNDONE.\n  Create our partitions by running cgdisk /dev/sda\n# cgdisk /dev/sda    Just press Return when warned about damaged GPT.\nNow we should be presented with our main drive showing the partition number, partition size, partition type, and partition name. If you see list of partitions, delete all those first.\n  Create the LVM partition\n Hit New again. Hit enter to select the default option for the first sector. Hit enter again to use the remainder of the disk. Set GUID to 8e00. Hit enter. Set name to lvm. Hit enter.    Lastly, hit Write at the bottom of the patitions list to write the changes to the disk. Type yes to confirm the write command. Now we are done partitioning the disk. Hit Quit to exit cgdisk. Go to the next section.\n  Verifying the partitions Use lsblk again to check the partitions we created. We? I thought I\u0026rsquo;m doing this guide for myself lol\n# lsblk You should see something like this:\nUnencrypted filesystem    NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT     sda 8:0 0 477G 0     sda1 8:1 0 1 0 part    sda2 8:2 0 1 0 part    sda3 8:3 0 175G 0 part    sda4 8:4 0 300G 0 part     sda is the main disk\nsda1 is the boot partition\nsda2 is the swap partition\nsda3 is the home partition\nsda4 is the root partition\nEncrypted filesystem    NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT     sda 8:0 0 477G 0 disk    sda1 8:1 0 1 0 part    sda2 8:2 0 1 0 part     sda is the main disk\nsda1 is the boot partition\nsda2 is the LVM partition\nSurprise! Surprise! We will not encrypt the /boot partition.\nFormat the partitions Unencrypted filesystem   Format /dev/sda1 partition as FAT32. This will be our /boot.\n# mkfs.fat -F32 /dev/sda1    Create and enable our swap under the /dev/sda2 partition.\n# mkswap /dev/sda2 # swapon /dev/sda2    Format /dev/sda3 and /dev/sda4 partition as EXT4. This will be our root and home partition.\n# mkfs.ext4 /dev/sda3 # mkfs.ext4 /dev/sda4    Encrypted filesystem   Format /dev/sda1 partition as FAT32. This will be our /boot.\n# mkfs.fat -F32 /dev/sda1    Create the LUKS encrypted container.\n# cryptsetup luksFormat /dev/sda2    Enter your passphrase twice. Don\u0026rsquo;t forget this!\n  Open the created container and name it whatever you want. In this guide I\u0026rsquo;ll just use cryptlvm.\n# cryptsetup open --type luks /dev/sda2 cryptlvm    Enter your passphrase and verify it.\n  The decrypted container is now available at /dev/mapper/cryptlvm.\n  Create a physical volume on top of the opened LUKS container:\n# pvcreate /dev/mapper/cryptlvm    Create the volume group and name it volume (or whatever you want), adding the previously created physical volume to it:\nIn this guide, I\u0026rsquo;ll just use volume as the volume group name.\n# vgcreate volume /dev/mapper/cryptlvm    Create all your needed logical volumes on the volume group. We will create a swap, root, and home logical volumes. Note that the volume is the name of the volume we just created.\n  Create our swap. I\u0026rsquo;ll assign 1GB to it.\n# lvcreate -L 1G volume -n swap  is will create `/dev/mapper/volume-swap`.   Create our root. In this guide, I\u0026rsquo;ll use 100GB.\n# lvcreate -L 100G volume -n root  is will create `/dev/mapper/volume-root`.   Create our home sweet home. I\u0026rsquo;ll just assign the remaining space to it.\n# lvcreate -l 100%FREE volume -n home    This will create /dev/mapper/volume-home.\n  Format the logical partitions under the LVM volume.\n  Format and create our swap.\n# mkswap /dev/mapper/volume-swap # swapon /dev/mapper/volume-swap    Format our root and home partitions.\n# mkfs.ext4 /dev/mapper/volume-root # mkfs.ext4 /dev/mapper/volume-home      Mount the filesystems Unencryped partition   Mount the /dev/sda partition to /mnt. This is our /:\n# mount /dev/sda3 /mnt    Create a /boot mountpoint:\n# mkdir /mnt/boot    Mount /dev/sda1 to /mnt/boot partition. This is will be our /boot:\n# mount /dev/sda1 /mnt/boot    Create a /home mountpoint:\n# mkdir /mnt/home    Mount /dev/sda4 to /mnt/home partition. This is will be our /home:\n# mount /dev/sda1 /mnt/home  don’t need to mount `swap` since it is already enabled.   Encrypted partition   Mount the /dev/mapper/volume-root partition to /mnt. This is our /:\n# mount /dev/mapper/volume-root /mnt    Create a /boot mountpoint:\n# mkdir /mnt/boot    Mount /dev/sda1 to /mnt/boot partition. This is will be our /boot:\n# mount /dev/sda1 /mnt/boot    Create a /home mountpoint:\n# mkdir /mnt/home    Mount /dev/mapper/volume-home to /mnt/home partition. This is will be our /home:\n# mount /dev/mapper/volume-home /mnt/home  don’t need to mount `swap` since it is already enabled.   Installation Now let’s go ahead and install base, linux, linux-firmware, and base-devel packages into our system.\n# pacstrap /mnt base base-devel linux linux-firmware The base package does not include all tools from the live installation, so installing other packages may be necessary for a fully functional base system. In particular, consider installing:\n  userspace utilities for the management of file systems that will be used on the system,\n ntfs-3g: NTFS filesystem driver and utilities unrar: The RAR uncompression program unzip: For extracting and viewing files in .zip archives p7zip: Command-line file archiver with high compression ratio unarchiver: unar and lsar: Objective-C tools for uncompressing archive files gvfs-mtp: Virtual filesystem implementation for GIO (MTP backend; Android, media player) libmtp: Library implementation of the Media Transfer Protocol android-udev: Udev rules to connect Android devices to your linux box mtpfs: A FUSE filesystem that supports reading and writing from any MTP devic xdg-user-dirs: Manage user directories like ~/Desktop and ~/Music    utilities for accessing RAID or LVM partitions,\n lvm2: Logical Volume Manager 2 utilities (if you are setting up an encrypted filesystem with LUKS/LVM, include this on pacstrap)    specific firmware for other devices not included in linux-firmware,\n  software necessary for networking,\n dhcpcd: RFC2131 compliant DHCP client daemon iwd: Internet Wireless Daemon inetutils: A collection of common network programs iputils: Network monitoring tools, including ping    a text editor(s),\n nano vim vi    packages for accessing documentation in man and info pages,\n man-db man-pages    and more useful tools:\n git: the fast distributed version control system tmux: A terminal multiplexer less: A terminal based program for viewing text files usbutils: USB Device Utilities bash-completion: Programmable completion for the bash shell    These tools will be useful later. So future me, install these.\nGenerating the fstab # genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab Check the resulting /mnt/etc/fstab file, and edit it in case of errors.\nChroot Now, change root into the newly installed system\n# arch-chroot /mnt /bin/bash Time zone A selection of timezones can be found under /usr/share/zoneinfo/. Since I am in the Philippines, I will be using /usr/share/zoneinfo/Asia/Manila. Select the appropriate timezone for your country:\n# ln -sf /usr/share/zoneinfo/Asia/Manila /etc/localtime Run hwclock to generate /etc/adjtime:\n# hwclock --systohc This command assumes the hardware clock is set to UTC.\nLocalization The locale defines which language the system uses, and other regional considerations such as currency denomination, numerology, and character sets. Possible values are listed in /etc/locale.gen. Uncomment en_US.UTF-8, as well as other needed localisations.\nUncomment en_US.UTF-8 UTF-8 and other needed locales in /etc/locale.gen, save, and generate them with:\n# locale-gen Create the locale.conf file, and set the LANG variable accordingly:\n# locale \u0026gt; /etc/locale.conf If you set the keyboard layout earlier, make the changes persistent in vconsole.conf:\n# echo \u0026quot;KEYMAP=us\u0026quot; \u0026gt; /etc/vconsole.conf Not using us layout? Replace it, stoopid.\nNetwork configuration Create the hostname file. In this guide I\u0026rsquo;ll just use MYHOSTNAME as hostname. Hostname is the host name of the host. Every 60 seconds, a minute passes in Africa.\n# echo \u0026quot;MYHOSTNAME\u0026quot; \u0026gt; /etc/hostname Open /etc/hosts to add matching entries to hosts:\n127.0.0.1 localhost ::1 localhost 127.0.1.1 MYHOSTNAME.localdomain\tMYHOSTNAME If the system has a permanent IP address, it should be used instead of 127.0.1.1.\nInitramfs Creating a new initramfs is usually not required, because mkinitcpio was run on installation of the kernel package with pacstrap. This is important if you are setting up a system with encryption!\nUnencrypted filesystem ``` # mkinitcpio -p linux ```  Encrypted filesystem with LVM/LUKS   Open /etc/mkinitcpio.conf with an editor:\n  In this guide, there are two ways to setting up initramfs, udev (default) and systemd. If you are planning to use plymouth(splashcreen), it is advisable to use a systemd-based initramfs.\n  udev-based initramfs (default).\nFind the HOOKS array, then change it to something like this:\nHOOKS=(base udev autodetect keyboard modconf block encrypt lvm2 filesystems fsck)    systemd-based initramfs.\nFind the HOOKS array, then change it to something like this:\nHOOKS=(base systemd autodetect keyboard sd-vconsole modconf block sd-encrypt sd-lvm2 filesystems fsck)    Regenerate initramfs image:\n# mkinitcpio -p linux      Adding Repositories - multilib and AUR Enable multilib and AUR repositories in /etc/pacman.conf. Open it with your editor of choice:\nAdding multilib repository Uncomment multilib (remove # from the beginning of the lines). It should look like this:\n[multilib] Include = /etc/pacman.d/mirrorlist Adding the AUR repository Add the following lines at the end of your /etc/pacman.conf to enable the AUR repo:\n[archlinuxfr] SigLevel = Never Server = http://repo.archlinux.fr/$arch pacman easter eggs You can enable the \u0026ldquo;easter-eggs\u0026rdquo; in pacman, the package manager of archlinux.\nOpen /etc/pacman.conf, then find # Misc options.\nTo add colors to pacman, uncomment Color. Then add Pac-Man to pacman by adding ILoveCandy under the Color string:\nColor ILoveCandy Update repositories and packages To check if you successfully added the repositories and enable the easter-eggs, run:\n# pacman -Syu If updating returns an error, open the pacman.conf again and check for human errors. Yes, you f\u0026rsquo;ed up big time.\nRoot password Set the root password:\n# passwd Add a user account Add a new user account. In this guide, I\u0026rsquo;ll just use MYUSERNAME as the username of the new user aside from root account. (My phrasing seems redundant, eh?) Of course, change the example username with your own:\n# useradd -m -g users -G wheel,storage,power,video,audio,rfkill,input -s /bin/bash MYUSERNAME This will create a new user and its home folder.\nSet the password of user MYUSERNAME:\n# passwd MYUSERNAME Add the new user to sudoers: If you want a root privilege in the future by using the sudo command, you should grant one yourself:\n# EDITOR=vim visudo Uncomment the line (Remove #):\n# %wheel ALL=(ALL) ALL Install the boot loader Yeah, this is where we install the bootloader. We will be using systemd-boot, so no need for grub2.\n  Install bootloader:\nWe will install it in /boot mountpoint (/dev/sda1 partition).\n# bootctl --path=/boot install    Create a boot entry /boot/loader/entries/arch.conf, then add these lines:\n  Unencrypted filesystem ``` title Arch Linux linux /vmlinuz-linux initrd /initramfs-linux.img options root=/dev/sda3 rw ``` If your `/` is not in `/dev/sda3`, make sure to change it. Save and exit.  Encrypted filesystem Remember the two-types of initramfs earlier? Each type needs a specific kernel parameters. So there\u0026rsquo;s also a two type of entries here. Remember that volume is the volume group name and /dev/mapper/volume-root is the path to /.\n  udev-based initramfs\ntitle Arch Linux linux /vmlinuz-linux initrd /initramfs-linux.img options cryptdevice=UUID=/DEV/SDA2/UUID/HERE:volume root=/dev/mapper/volume-root rw  place `/DEV/SDA2/UUID/HERE` with the UUID of your `LVM` partition. You can check it by running `blkid /dev/sda2`. Note that `cryptdevice` parameter is unsupported by plymouth so it's advisable to use systemd-based initramfs if you are planning to use it. p: If you are using `vim`, you can write the UUID easier by typing `:read ! blkid /dev/sda2` then hit enter. Then manipulate the output by using visual mode.   systemd-based initramfs\ntitle Arch Linux linux /vmlinuz-linux initrd /intel-ucode.img initrd /initramfs-linux.img options rd.luks.name=/DEV/SDA2/UUID/HERE=volume root=/dev/mapper/volume-root rw  place `/DEV/SDA2/UUID/HERE` with the UUID of your `LVM` partition. You can check it by running `blkid /dev/sda2`. p: If you are using `vim`, you can write the UUID easier by typing `:read ! blkid /dev/sda2` then hit enter. Then manipulate the output by using visual mode.   Update boot loader configuration Update bootloader configuration\n# vim /boot/loader/loader.conf Delete all of its content, then replaced it by:\ndefault arch.conf timeout 0 console-mode max editor no Enable internet connection for the next boot To enable the network daemons on your next reboot, you need to enable dhcpcd.service for wired connection and iwd.service for a wireless one.\n# systemctl enable dhcpcd iwd Exit chroot and reboot: Exit the chroot environment by typing exit or pressing Ctrl + d. You can also unmount all mounted partition after this.\nFinally, reboot.\nFinale If your installation is a success, then yay!!! If not, you should start questioning your own existence. Are your parents proud of you?\n[POST INSTALLATION]\t[EXTRAS] ","permalink":"http://example.org/posts/arch-install/","title":"Arch Installation Guide"},{"content":"","permalink":"http://example.org/categories/","title":"Categories"},{"content":"","permalink":"http://example.org/categories/guides/","title":"guides"},{"content":"","permalink":"http://example.org/tags/linux/","title":"linux"},{"content":"“What new technology does is create new opportunities to do a job that customers want done.” ― Tim O’Reilly\n","permalink":"http://example.org/posts/","title":"Posts"},{"content":"","permalink":"http://example.org/tags/","title":"Tags"},{"content":"          Hi 👋 I\u0026rsquo;m a recent graduate entering the cybersecurity space!\n","permalink":"http://example.org/","title":"Yens Loff | About"},{"content":"In time this section will have been populated with many projects as they are completed.\n","permalink":"http://example.org/projects/","title":"Projects"}]
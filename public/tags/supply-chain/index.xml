<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Supply Chain on Yens Loff</title>
    <link>http://localhost:1313/tags/supply-chain/</link>
    <description>Recent content in Supply Chain on Yens Loff</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Feb 2025 10:29:17 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/supply-chain/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding the Go Module Mirror Supply Chain Attack</title>
      <link>http://localhost:1313/posts/go-module-mirror-attack/</link>
      <pubDate>Mon, 10 Feb 2025 10:29:17 +0000</pubDate>
      <guid>http://localhost:1313/posts/go-module-mirror-attack/</guid>
      <description>&lt;p&gt;In the world of software development, security is a paramount concern, especially as developers increasingly rely on third-party packages to build their applications. A recent incident concerning the Go programming language&amp;rsquo;s module mirror has highlighted the vulnerabilities inherent in relying on these external packages. This article delves into that incident, exploring supply chain attacks, the mechanisms behind them, and what developers can do to safeguard their code.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-happened&#34;&gt;What Happened?&lt;/h2&gt;&#xA;&lt;p&gt;For more than three years, the Go module mirror served malicious packages that exploited developer trust. Researchers identified these unsafe modifications in the supply chain, pointing to a critical weakness in how programmers use package managers. This incident underscores a significant issue faced by users of many modern programming languages, including Go, Python, and JavaScript: the risk of unvetted third-party code infiltrating software projects.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
